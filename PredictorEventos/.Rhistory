theCats <- (names(values))
p <- plot_ly(
name = "Reason for admission",
type = 'treemap',
labels = theCats,
values = values,
parents = NA,
)
p <- p %>% layout(treemapcolorway=(colormap(colormap=c('#FFFFFF','#FF0000'),nshades = 8)))
install.packages("colormap")
package(colormap)
library(colormap)
library(colormap)
datos <- ((operacionesAngio$`MOTIVO DE INGRESO`))
values <- sort(table(datos))
theCats <- (names(values))
p <- plot_ly(
name = "Reason for admission",
type = 'treemap',
labels = theCats,
values = values,
parents = NA,
)
p <- p %>% layout(treemapcolorway=(colormap(colormap=c('#FFFFFF','#FF0000'),nshades = 8)))
p
library(colormap)
datos <- ((operacionesAngio$`MOTIVO DE INGRESO`))
values <- sort(table(datos))
theCats <- (names(values))
p <- plot_ly(
name = "Reason for admission",
type = 'treemap',
labels = theCats,
values = values,
parents = NA,
)
p <- p %>% layout(treemapcolorway=(colormap(colormap=c('#FFFFFF','#FFD1D1FF'),nshades = 8)))
library(colormap)
datos <- ((operacionesAngio$`MOTIVO DE INGRESO`))
values <- sort(table(datos))
theCats <- (names(values))
p <- plot_ly(
name = "Reason for admission",
type = 'treemap',
labels = theCats,
values = values,
parents = NA,
)
p <- p %>% layout(treemapcolorway=(colormap(colormap=c('#FFFFFF','#FFF000'),nshades = 8)))
p
library(colormap)
datos <- ((operacionesAngio$`MOTIVO DE INGRESO`))
values <- sort(table(datos))
theCats <- (names(values))
p <- plot_ly(
name = "Reason for admission",
type = 'treemap',
labels = theCats,
values = values,
parents = NA,
)
p <- p %>% layout(treemapcolorway=(colormap(colormap=c('#FFFFFF','#FF0000'),nshades = 8)))
p
library(colormap)
datos <- ((operacionesAngio$`MOTIVO DE INGRESO`))
values <- sort(table(datos))
theCats <- (names(values))
p <- plot_ly(
name = "Reason for admission",
type = 'treemap',
labels = theCats,
values = values,
parents = NA,
)
p <- p %>% layout(treemapcolorway=(colormap(colormap=c('#FFFFFF','#FF1000'),nshades = 8)))
p
library(colormap)
datos <- ((operacionesAngio$`MOTIVO DE INGRESO`))
values <- sort(table(datos))
theCats <- (names(values))
p <- plot_ly(
name = "Reason for admission",
type = 'treemap',
labels = theCats,
values = values,
parents = NA,
)
p <- p %>% layout(treemapcolorway=(colormap(colormap=c('#FFFFFF','#FFBAB9'),nshades = 8)))
p
library(colormap)
datos <- ((operacionesAngio$`MOTIVO DE INGRESO`))
values <- sort(table(datos))
theCats <- (names(values))
p <- plot_ly(
name = "Reason for admission",
type = 'treemap',
labels = theCats,
values = values,
parents = NA,
)
p <- p %>% layout(treemapcolorway=(colormap(colormap=c('#FFFFFF','#FFBAB9'),nshades = 8)))
p
library(colormap)
datos <- ((operacionesAngio$`MOTIVO DE INGRESO`))
values <- sort(table(datos))
theCats <- (names(values))
p <- plot_ly(
name = "Reason for admission",
type = 'treemap',
labels = theCats,
values = values,
parents = NA,
)
p <- p %>% layout(treemapcolorway=(colormap(colormap=c('#FFFFFF','#FFFAB9'),nshades = 8)))
p
library(colormap)
datos <- ((operacionesAngio$`MOTIVO DE INGRESO`))
values <- sort(table(datos))
theCats <- (names(values))
p <- plot_ly(
name = "Reason for admission",
type = 'treemap',
labels = theCats,
values = values,
parents = NA,
)
p <- p %>% layout(treemapcolorway=(colormap(colormap=c('#FFFFFF','#FF0000'),nshades = 8)))
p
table(datos)
library(colormap)
datos <- ((operacionesAngio$`MOTIVO DE INGRESO`))
values <- sort(table(datos))
theCats <- (names(values))
p <- plot_ly(
name = "Reason for admission",
type = 'treemap',
labels = theCats,
values = values,
parents = NA,
)
p <- p %>% layout(treemapcolorway=(colormap(colormap=c('#FFFFFF','#FF0000'),nshades = 8)))
p
table(datos)
values
```{r table-simple, echo=FALSE, message=FALSE, warnings=FALSE, results='asis'}
```{r table-simple, echo=FALSE, message=FALSE, warnings=FALSE, results='asis'}
require(pander)
install.packages("pander")
require(pander)
panderOptions('table.split.table', Inf)
set.caption("My great data")
my.data <- vlues
my.data <- values
df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
names(df) <- unname(as.list(df[1,])) # put headers on
df <- df[-1,] # remove first row
row.names(df)<-NULL
pander(df, style = 'rmarkdown')
set.caption("My great data")
my.data <- values
df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
my.data <- cat(values)
df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
names(df) <- unname(as.list(df[1,])) # put headers on
df <- df[-1,] # remove first row
row.names(df)<-NULL
pander(df, style = 'rmarkdown')
my.data <- cat(values)
df <- read.delim(textConnection(my.data),header=FALSE,sep="|",strip.white=TRUE,stringsAsFactors=FALSE)
cat(values)
theCats
values
p
colormap(colormap=c('#FFFFFF','#FF0000'),nshades = 12))
colormap(colormap=c('#FFFFFF','#FF0000'),nshades = 12)
colormap(colormap=c('#FFFFFF','#FF0000'),nshades = 8)
```{r treem, echo=FALSE, warning=FALSE}
fig <- plot_ly(data = Data ,y = ~`TIEMPO DE BOMBA`, x = ~`EDAD`, type = "scatter",
marker = list(size = 5,
color = 'rgba(255, 127, 117, .2)',
line = list(color = 'rgba(255, 127, 117, .9)',
width = 2)))
fig <- fig %>% layout(title = "Pump time related to ages",xaxis = xAxis, yaxis = yAxis)
fig
```{r treem, echo=FALSE, warning=FALSE}
```{r treem, echo=FALSE, warning=FALSE}
library(colormap)
datos <- ((operacionesAngio$`MOTIVO DE INGRESO`))
values <- sort(table(datos))
theCats <- (names(values))
p <- plot_ly(
name = "Reason for admission",
type = 'treemap',
labels = theCats,
values = values,
parents = NA,
)
p <- p %>% layout(treemapcolorway=(colormap(colormap=c('#FFFFFF','#FF0000'),nshades = 8)))
p
```{r treem, echo=FALSE, warning=FALSE}
![](./sources\images\ExtraCorporeal.png)
```{r mediaBomba, echo=FALSE, fig.width= 4.3, fig.height= 4.3, warning = FALSE, message = FALSE}
fig <- plot_ly(data = Data ,y = ~`TIEMPO DE BOMBA`, x = ~`EDAD`, type = "scatter",
marker = list(size = 5,
color = 'rgba(255, 127, 117, .2)',
line = list(color = 'rgba(255, 127, 117, .9)',
width = 2)))
fig <- fig %>% layout(title = "Pump time related to ages",xaxis = xAxis, yaxis = yAxis)
fig
fig <- plot_ly(data = Data ,y = ~`TIEMPO DE BOMBA`, x = ~`EDAD`, type = "scatter",
marker = list(size = 5,
color = 'rgba(255, 127, 117, .2)',
line = list(color = 'rgba(255, 127, 117, .9)',
width = 2)))
fig <- fig %>% layout(title = "Pump time related to ages",xaxis = xAxis, yaxis = yAxis)
fig
library(tidyverse)
data=as.data.frame(table(pacComplicac$EDAD))
ggplot(data, aes(x=Var1, y=Freq)) +
geom_segment( aes(x=Var1, xend=Var1, y=0, yend=Freq)) +  labs(x = "Age", y = "Amount") +
geom_point( size=5, color="blue", fill=alpha("lightblue", 0.3), alpha=0.7, shape=21, stroke=2)
library(ggplot2)
data=as.data.frame(table(pacComplicac$SEXO))
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data,fill=category)) +
ggplot(data,fill=category) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
library(ggplot2)
data=as.data.frame(table(pacComplicac$SEXO))
ggplot(data,fill=category) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
data$fraction <- data$SEXO / sum(data$count)
data$fraction <- sum(data$SEXO) / sum(data$count)
View(data)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
data$label <- paste0(data$category, "\n value: ", data$SEXO)
data$label <- paste0(data$SEXO, "\n value: ", data$SEXO)
# Compute a good label
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
View(data)
View(data)
library(ggplot2)
theDates=(pacComplicac$SEXO)
theValues= sort(table(theDates))
theCats <- (names(theValues))
data <- data.frame(
category=theCats,
count=theValues
)
# Compute percentages
data$fraction <- data$count / sum(data$count)
View(data)
theDates=(pacComplicac$SEXO)
theValues= sort(table(theDates))
theCats <- (names(theValues))
theValues= sort(table(theDates))
theValues
theCats <- (names(theValues))
theCats
as.vector(theValues)
library(ggplot2)
theDates=(pacComplicac$SEXO)
theValues= sort(table(theDates))
theCats <- (names(theValues))
data <- data.frame(
category=theCats,
count=as.vector(theValues)
)
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category, "\n value: ", data$count)
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
# Compute a good label
data$label <- paste0(data$category, data$count,"%")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
# Compute a good label
data$label <- paste0(data$category,"\n", data$count,"%")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=1x) +
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(palette=1) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
scale_fill_brewer(c("Red","Blue")) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
colors(c("Blue","Red")) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
color(c("Blue","Red")) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
colour(c("Blue","Red")) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
colour=c("Blue","Red")) +
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
library(ggplot2)
theDates=(pacComplicac$SEXO)
theValues= sort(table(theDates))
theCats <- (names(theValues))
data <- data.frame(
category=theCats,
count=as.vector(theValues)
)
View(data)
View(data)
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
```{r treem, echo=FALSE, warning=FALSE}
library(colormap)
datos <- ((operacionesAngio$`MOTIVO DE INGRESO`))
values <- sort(table(datos))
p <- plot_ly(
name = "Reason for admission",
type = 'treemap',
labels = theCats,
values = values,
parents = NA,
)
```{r treem, echo=FALSE, warning=FALSE}
data <- data.frame(
category=theCats,
count=as.vector(theValues)/sum(theValues)
)
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category,"\n", data$count,"%")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
library(ggplot2)
theDates=(pacComplicac$SEXO)
theValues= sort(table(theDates))
theCats <- (names(theValues))
data <- data.frame(
category=theCats,
count=as.vector(theValues)/sum(theValues)*100
)
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category,"\n", data$count,"%")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
data <- data.frame(
category=theCats,
count=round(as.vector(theValues)/sum(theValues)*100)
)
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category,"\n", data$count,"%")
# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
